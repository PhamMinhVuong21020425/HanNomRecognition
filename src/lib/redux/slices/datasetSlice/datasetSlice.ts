/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';

/* Instruments */
import { Dataset } from '@/entities/dataset.entity';
import {
  getAllDatasetsAsync,
  getDatasetsOfUserAsync,
  updateDatasetAsync,
} from './thunkActions';

/* Types */
export interface DatasetState {
  datasets: Dataset[];
  selDataset: Dataset | null;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: DatasetState = {
  datasets: [],
  selDataset: null,
  status: 'idle',
} satisfies DatasetState as DatasetState;

export const datasetSlice = createSlice({
  name: 'dataset',
  // `createSlice` will infer the state type from the `initialState` argument
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSelDataset: (state, action: PayloadAction<Dataset | null>) => {
      state.selDataset = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: builder => {
    builder
      // getAllDatasetsAsync
      .addCase(getAllDatasetsAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(getAllDatasetsAsync.rejected, state => {
        state.status = 'failed';
      })
      .addCase(
        getAllDatasetsAsync.fulfilled,
        (state, action: PayloadAction<Dataset[]>) => {
          state.status = 'idle';
          state.datasets = action.payload;
        }
      )

      // getDatasetsOfUserAsync
      .addCase(getDatasetsOfUserAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(getDatasetsOfUserAsync.rejected, state => {
        state.status = 'failed';
      })
      .addCase(
        getDatasetsOfUserAsync.fulfilled,
        (state, action: PayloadAction<Dataset[]>) => {
          state.status = 'idle';
          state.datasets = action.payload;
        }
      )

      // updateDatasetAsync
      .addCase(updateDatasetAsync.pending, state => {
        state.status = 'loading';
      })
      .addCase(updateDatasetAsync.rejected, state => {
        state.status = 'failed';
      })
      .addCase(
        updateDatasetAsync.fulfilled,
        (state, action: PayloadAction<Dataset>) => {
          state.status = 'idle';
          const updatedDataset = action.payload;
          const { name, description, is_public, updated_at } = updatedDataset;

          const index = state.datasets.findIndex(
            dataset => dataset.id === updatedDataset.id
          );

          if (index !== -1) {
            state.datasets[index] = {
              ...state.datasets[index],
              name,
              description,
              is_public,
              updated_at,
            };
          }

          if (state.selDataset?.id === updatedDataset.id) {
            state.selDataset = {
              ...state.selDataset,
              name,
              description,
              is_public,
              updated_at,
            };
          }
        }
      );
  },
});

export const { setSelDataset } = datasetSlice.actions;

export const datasetReducer = datasetSlice.reducer;
